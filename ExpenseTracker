from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Model for Expenses
class Expense(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    date = db.Column(db.String(10), nullable=False)  # Format: YYYY-MM-DD

# Initialize the database
with app.app_context():
    db.create_all()

@app.route('/')
def home():
    return "Welcome to the Expense Tracker API!"

@app.route('/expenses', methods=['POST'])
def add_expense():
    data = request.get_json()
    new_expense = Expense(
        title=data['title'],
        amount=data['amount'],
        date=data['date']
    )
    db.session.add(new_expense)
    db.session.commit()
    return jsonify({'message': 'Expense added successfully'}), 201

@app.route('/expenses', methods=['GET'])
def get_expenses():
    expenses = Expense.query.all()
    return jsonify([{
        'id': e.id,
        'title': e.title,
        'amount': e.amount,
        'date': e.date
    } for e in expenses]), 200

@app.route('/expenses/<int:id>', methods=['GET'])
def get_expense(id):
    expense = Expense.query.get_or_404(id)
    return jsonify({
        'id': expense.id,
        'title': expense.title,
        'amount': expense.amount,
        'date': expense.date
    }), 200

@app.route('/expenses/<int:id>', methods=['PUT'])
def update_expense(id):
    data = request.get_json()
    expense = Expense.query.get_or_404(id)
    expense.title = data['title']
    expense.amount = data['amount']
    expense.date = data['date']
    db.session.commit()
    return jsonify({'message': 'Expense updated successfully'}), 200

@app.route('/expenses/<int:id>', methods=['DELETE'])
def delete_expense(id):
    expense = Expense.query.get_or_404(id)
    db.session.delete(expense)
    db.session.commit()
    return jsonify({'message': 'Expense deleted successfully'}), 200

if __name__ == "__main__":
    app.run(debug=True)
